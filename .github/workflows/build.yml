# This workflow will build a golang project on both Linux and Windows
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21.0"

      - name: Install winfsp (Windows)
        if: runner.os == 'Windows'
        run: |
          $msiUrl = "https://github.com/winfsp/winfsp/releases/download/v2.0/winfsp-2.0.23075.msi"
          Invoke-WebRequest -Uri $msiUrl -OutFile winfsp.msi
          Start-Process -NoNewWindow -Wait msiexec "/i winfsp.msi /qn INSTALLLEVEL=1000"

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y libfuse-dev

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          $env:CPATH = "C:\Program Files (x86)\WinFsp\inc\fuse"
          go build -v -o build/storage-x86_64-pc-windows-msvc.exe

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: go build -v -o build/storage-x86_64-unknown-linux-gnu

      - name: Test
        run: go test -v ./...

      - name: Upload build artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-windows
          path: build/storage-x86_64-pc-windows-msvc.exe

      - name: Upload build artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-linux
          path: build/storage-x86_64-unknown-linux-gnu
